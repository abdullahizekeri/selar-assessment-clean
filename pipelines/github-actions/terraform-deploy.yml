name: Terraform Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPO: sample-api
  CLUSTER_NAME: selar-eks
  HELM_CHART_PATH: deploy/helm/sample-api

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Terraform Init
      - name: Terraform Init
        working-directory: infra/envs/dev
        run: terraform init

      # Terraform Validate
      - name: Terraform Validate
        working-directory: infra/envs/dev
        run: terraform validate

      # Terraform Plan
      - name: Terraform Plan
        working-directory: infra/envs/dev
        run: terraform plan -out=tfplan

      # Save plan for approval
      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: infra/envs/dev/tfplan

  apply:
    needs: terraform
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://github.com/${{ github.repository }}/deployments

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: infra/envs/dev
        run: terraform init

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: infra/envs/dev

      - name: Terraform Apply
        working-directory: infra/envs/dev
        run: terraform apply -auto-approve tfplan

  build_and_deploy:
    needs: apply
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build and push image
      - name: Build, Tag, and Push Docker Image
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          docker build -t $ECR_REPO:$IMAGE_TAG ./apps/sample-api
          docker tag $ECR_REPO:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG

      # Update kubeconfig
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      # Deploy with Helm
      - name: Deploy Helm Chart
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          helm upgrade --install sample-api $HELM_CHART_PATH \
            --set image.repository=${{ steps.login-ecr.outputs.registry }}/$ECR_REPO \
            --set image.tag=$IMAGE_TAG
